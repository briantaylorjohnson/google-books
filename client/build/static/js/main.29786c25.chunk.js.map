{"version":3,"sources":["components/Nav/Nav.js","components/Jumbotron/Jumbotron.js","utils/API.js","components/Search/Search.js","components/Books/Books.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Jumbotron","bookTitle","axios","get","Search","props","state","bookData","searchTitleChange","bind","searchButtonClick","c","preventDefault","this","setState","target","value","console","log","s","API","then","data","aria-describedby","placeholder","onChange","onClick","React","Component","Results","ResultListing","SearchContainer","Books","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kWAwBeA,MApBf,WACE,OACE,yBAAKC,UAAU,+CACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,gBAGA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBAC5K,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,sBAC3C,yBAAKR,UAAU,cACb,uBAAGA,UAAU,2BAA2BC,KAAK,WAA7C,UAA8D,0BAAMD,UAAU,WAAhB,cAC9D,uBAAGA,UAAU,oBAAoBC,KAAK,UAAtC,a,MCAKQ,MAZf,WACE,OACE,yBAAKT,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,+BACA,uBAAGA,UAAU,QAAb,mE,gCCNZ,EACgB,SAACU,GAAgB,OAAOC,IAAMC,IAAI,qBCC5CC,E,YAEJ,WAAYC,GACX,IAAD,8BACE,4CAAMA,KACDC,MACL,CACEL,UAAW,GACXM,SAAU,IAEZ,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAR3B,E,+EAWkBE,GAEhBA,EAAEC,iBACFC,KAAKC,SAAS,CAACb,UAAWU,EAAEI,OAAOC,QACnCC,QAAQC,IAAIL,KAAKP,MAAML,a,wCAGPkB,GACjB,IAAD,OACEA,EAAEP,iBAEFK,QAAQC,IAAIL,KAAKP,MAAML,WAEvBmB,EAAeP,KAAKP,MAAML,WACzBoB,MAAM,SAACC,GAENL,QAAQC,IAAII,GACZ,EAAKR,SAAS,CAACP,SAAUe,IACzB,EAAKR,SAAS,CAACb,UAAW,U,+BAK7B,IAAD,OACE,OACE,yBAAKV,UAAU,6CACb,2CACA,8BACE,yBAAKA,UAAU,cACb,6CACA,2BAAOE,KAAK,OAAOF,UAAU,eAAeQ,GAAG,wBAAwBwB,mBAAiB,kBAAkBC,YAAY,cAAcC,SAAU,SAACd,GAAD,OAAO,EAAKH,kBAAkBG,MAC5K,2BAAOZ,GAAG,sBAAsBR,UAAU,wBAA1C,4EAEF,4BAAQE,KAAK,SAASF,UAAU,yBAAyBmC,QAAS,SAACP,GAAD,OAAO,EAAKT,kBAAkBS,KAAhG,gB,GA/CWQ,IAAMC,WAsD3B,SAASC,IAEP,OACE,yBAAKtC,UAAU,0DACb,8CACA,yBAAKA,UAAU,2BACb,kBAACuC,EAAD,QAMR,SAASA,IAEP,OACE,oDAIJ,SAASC,IAEP,OACE,6BACE,kBAAC,EAAD,MACA,kBAACF,EAAD,O,MCxESG,MAPf,WACE,OACE,2D,eC8BWC,E,iLAzBX,OACE,6BACE,yBAAK1C,UAAU,aAGb,kBAAC,EAAD,MAGA,kBAAC,EAAD,MAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAWL,IACjC,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWJ,Y,GAnB5BJ,aCKES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.29786c25.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Nav.css\";\n\n// Creates Nav component for heading and links to pages\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/\">\n          Google Books\n      </a>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n        <div className=\"navbar-nav\">\n          <a className=\"nav-item nav-link active\" href=\"/search\">Search <span className=\"sr-only\">(current)</span></a>\n          <a className=\"nav-item nav-link\" href=\"/books\">Saved</a>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\n// Exports Nav component\nexport default Nav;","import React from \"react\";\nimport \"./Jumbotron.css\";\n\n// Creates Nav component for heading and links to pages\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n            <h1 className=\"display-4\">(React) Google Books Search</h1>\n            <p className=\"lead\">Welcome! Here you can search for and save books of interest.</p>\n        </div>\n    </div>\n  );\n}\n\n// Exports Nav component\nexport default Jumbotron;","import axios from \"axios\"\n\nexport default\n{\n    bookSearch: (bookTitle) => { return axios.get(\"/api/book_search\")}\n}","import React from \"react\";\nimport \"./Search.css\";\nimport API from \"../../utils/API\"\n\n// Creates Search component for heading and links to pages\nclass Search extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state =\n    {\n      bookTitle: \"\",\n      bookData: []\n    }\n    this.searchTitleChange = this.searchTitleChange.bind(this);\n    this.searchButtonClick = this.searchButtonClick.bind(this);\n  }\n\n  searchTitleChange(c)\n  {\n    c.preventDefault();\n    this.setState({bookTitle: c.target.value});\n    console.log(this.state.bookTitle);\n  }\n\n  searchButtonClick(s)\n  {\n    s.preventDefault();\n    \n    console.log(this.state.bookTitle);\n    \n    API.bookSearch(this.state.bookTitle)\n    .then( (data) =>\n    {\n      console.log(data);\n      this.setState({bookData: data});\n      this.setState({bookTitle: \"\"});\n    })\n  }\n\n  render()\n  {\n    return (\n      <div className=\"container book-search pl-3 pt-3 pr-3 pb-3\">\n        <h5>Book Search</h5>\n        <form>\n          <div className=\"form-group\">\n            <label>Book Title</label>\n            <input type=\"text\" className=\"form-control\" id=\"input-text-book-title\" aria-describedby=\"bookTitleSearch\" placeholder=\"Enter title\" onChange={(c) => this.searchTitleChange(c)}></input>\n            <small id=\"bookTitleSearchHelp\" className=\"form-text text-muted\">Enter a book title and click the search button to see what's out there!</small>\n          </div>\n          <button type=\"submit\" className=\"btn btn-sm btn-success\" onClick={(s) => this.searchButtonClick(s)}>Search</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction Results()\n{\n  return (\n    <div className=\"container book-search-results pl-3 pt-3 pr-3 pb-3 mt-3\">\n      <h5>Search Results</h5>\n      <div className=\"search-results-listings\">\n        <ResultListing />\n      </div>\n    </div>\n  );\n}\n\nfunction ResultListing()\n{\n  return (\n    <div>Result Listing Here</div>\n  );\n}\n\nfunction SearchContainer()\n{\n  return (\n    <div>\n      <Search />\n      <Results />\n    </div>\n  );\n}\n\nexport {Search, Results, ResultListing, SearchContainer};","import React from \"react\";\nimport \"./Books.css\";\n\n// Creates Nav component for heading and links to pages\nfunction Books() {\n  return (\n    <div>List all your books here!</div>\n  );\n}\n\n// Exports Nav component\nexport default Books;","import React, { Component } from \"react\";\nimport Nav from \"./components/Nav\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport {SearchContainer} from \"./components/Search\";\nimport Books from \"./components/Books\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nclass App extends Component\n{\n  render()\n  {\n    return (\n      <div>\n        <div className=\"container\">\n\n          {/* Navigation */}\n          <Nav />\n\n          {/* Jumbotron */}\n          <Jumbotron />\n\n          {/* Main Content */}\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={SearchContainer} />\n              <Route path=\"/search\" component={SearchContainer} />\n              <Route path=\"/books\" component={Books} />\n            </Switch>\n          </Router>\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}